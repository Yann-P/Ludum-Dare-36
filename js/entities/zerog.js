// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gm.ZeroG = (function(_super) {

    __extends(ZeroG, _super);

    function ZeroG(game, xx, yy, ww, hh, enabledByDefault, enableTriggers, disableTriggers, data) {
      this.enableTriggers = enableTriggers;
      this.disableTriggers = disableTriggers;
      ZeroG.__super__.constructor.call(this, game, xx, yy, null, parseInt(data.mode) || null);
      this.width = ww * gm.TILE_SIZE;
      this.height = hh * gm.TILE_SIZE;
      this.game.physics.enable(this, Phaser.Physics.ARCADE);
      this.body.allowGravity = false;
      this.body.immovable = true;
      this.direction = +data.direction || gm.Direction.UP;
      this.force = +data.force || 1000;
      this.working = enabledByDefault;
      this.setupEmitter();
    }

    ZeroG.prototype.setupEmitter = function() {
      var factor;
      this.emitter = this.game.add.emitter(this.x + 30, this.y + 50);
      this.emitter.makeParticles('steam');
      this.emitter.setAlpha(0.5, 0, 1000, Phaser.Easing.Cubic.In);
      this.emitter.setScale(3, 8, 3, 8, 1000, Phaser.Easing.Cubic.Out);
      this.emitter.gravity = -this.game.physics.arcade.gravity.y - 100;
      factor = -1;
      if (this.direction === gm.Direction.UP || this.direction === gm.Direction.LEFT) {
        factor = 1;
      }
      if (this.direction === gm.Direction.UP || this.direction === gm.Direction.DOWN) {
        this.emitter.minParticleSpeed.set(-50, -100 * factor);
        this.emitter.maxParticleSpeed.set(50, -300 * factor);
      }
      if (this.direction === gm.Direction.LEFT || this.direction === gm.Direction.RIGHT) {
        this.emitter.minParticleSpeed.set(-100 * factor, -50);
        this.emitter.maxParticleSpeed.set(-300 * factor, 50);
      }
      return this.emitter.start(false, 1000, 100);
    };

    ZeroG.prototype.update = function() {
      var t, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;
      this.emitter.on = this.working && this.enabled;
      if (!this.working) {
        _ref = this.enableTriggers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          if (t.fired) {
            this.working = true;
          }
        }
      } else {
        _ref1 = this.disableTriggers;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          t = _ref1[_j];
          if (t.fired) {
            this.working = false;
          }
        }
      }
      _ref2 = this.enableTriggers.concat(this.disableTriggers);
      _results = [];
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        t = _ref2[_k];
        _results.push(t.reset());
      }
      return _results;
    };

    ZeroG.prototype.applyForce = function(sprite) {
      var forceX, forceY;
      forceX = (this.direction === gm.Direction.RIGHT ? this.force : this.direction === gm.Direction.LEFT ? -this.force : 0);
      forceY = (this.direction === gm.Direction.UP ? -this.force : this.direction === gm.Direction.DOWN ? this.force : 0);
      sprite.body.velocity.x += forceX;
      return sprite.body.velocity.y += forceY;
    };

    return ZeroG;

  })(gm.Entity);

}).call(this);
