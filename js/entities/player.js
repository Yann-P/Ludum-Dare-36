// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gm.Player = (function(_super) {

    __extends(Player, _super);

    function Player(game, xx, yy) {
      this.game = game;
      this.xx = xx;
      this.yy = yy;
      Player.__super__.constructor.call(this, this.game, xx * gm.TILE_SIZE, yy * gm.TILE_SIZE, 'player');
      this.animations.add('run_right', [4, 7, 10, 7]);
      this.animations.add('run_left', [5, 8, 11, 8]);
      this.animations.add('idle_right', [3]);
      this.animations.add('front', [6]);
      this.animations.add('back', [0]);
      this.animations.add('idle_left', [9]);
      this.animations.add('jump_right', [1]);
      this.animations.add('jump_left', [2]);
      this.blockJump = false;
      this.direction = gm.Direction.RIGHT;
      this.speed = 280;
      this.frozen = false;
      this.cursors = this.game.input.keyboard.createCursorKeys();
      this.jumpButton = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);
      this.inventory = new gm.Inventory(this.game);
      this.game.add.existing(this.inventory);
      this.game.physics.enable(this, Phaser.Physics.ARCADE);
      this.body.setSize(30, 80, 10, 10);
      this.body.checkCollision.up = false;
      this.tint = gm.DARK_TINT;
      this.game.add.existing(this);
      this.lastText = 0;
      this.sayWhat = game.add.text(0, 0, '', {
        fontFamily: 'sans-serif',
        fontSize: 20,
        fill: 'white'
      });
    }

    Player.prototype.freeze = function() {
      return this.frozen = true;
    };

    Player.prototype.unfreeze = function() {
      return this.frozen = false;
    };

    Player.prototype.say = function(text) {
      this.sayWhat.text = text;
      return this.lastText = Date.now();
    };

    Player.prototype.update = function() {
      var dir, state;
      this.sayWhat.x = this.x - this.sayWhat.text.length * 6 + 50;
      this.sayWhat.y = this.y - 30;
      this.sayWhat.alpha = 1;
      if (Date.now() - this.lastText > 5000) {
        this.sayWhat.alpha = 0;
      }
      this.body.velocity.x *= .7;
      if (!this.frozen) {
        state = 'run';
        if (this.cursors.left.isDown) {
          this.direction = gm.Direction.LEFT;
          this.body.velocity.x = -this.speed;
        } else if (this.cursors.right.isDown) {
          this.direction = gm.Direction.RIGHT;
          this.body.velocity.x = this.speed;
        } else if (Math.abs(this.body.velocity.x) < 20) {
          state = 'idle';
        }
        if (this.jumpButton.isDown && this.body.touching.down && !this.blockJump) {
          this.body.velocity.y = -850;
        }
      }
      dir = (this.direction === gm.Direction.RIGHT ? 'right' : 'left');
      if (this.body.touching.down) {
        this.animations.play(state + '_' + dir, 8, true);
      } else {
        this.animations.play('jump_' + dir);
      }
      this.xx = ~~((this.body.x + this.body.width / 2) / gm.TILE_SIZE);
      return this.yy = ~~((this.body.y + this.body.height - gm.TILE_SIZE / 2) / gm.TILE_SIZE);
    };

    return Player;

  })(Phaser.Sprite);

}).call(this);
