// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gm.Scenery = {};

  gm.Scenery.Item = (function(_super) {

    __extends(Item, _super);

    function Item(game, x, y, id, mode, extra) {
      this.extra = extra != null ? extra : {};
      Item.__super__.constructor.call(this, game, x, y, id, parseInt(extra.mode) || null);
      this.x -= this.width / 2 - gm.TILE_SIZE / 2;
      this.y -= this.height / 2 - gm.TILE_SIZE / 2;
      if (this.extra.scale) {
        this.scale.setTo(+this.extra.scale, +this.extra.scale);
      }
    }

    return Item;

  })(gm.Entity);

  gm.Scenery.Lamp = (function(_super) {

    __extends(Lamp, _super);

    function Lamp(game, x, y, id, extra) {
      Lamp.__super__.constructor.call(this, game, x, y, id, null, extra);
      this.animations.add('anim', [0, 1]);
      this.animations.play('anim', 10, true);
    }

    return Lamp;

  })(gm.Scenery.Item);

  gm.Scenery.GearTrigger = (function(_super) {

    __extends(GearTrigger, _super);

    function GearTrigger(game, x, y, id, extra) {
      GearTrigger.__super__.constructor.call(this, game, x, y, id, gm.Mode.IM, extra);
      this.blendMode = PIXI.blendModes.ADD;
      this.anchor.setTo(0.5, 0.5);
      this.scale.set(0.3, 0.3);
      this.x += gm.TILE_SIZE;
      this.y += gm.TILE_SIZE;
      this.tween = this.game.add.tween(this).to({
        angle: 90
      }, 5000, Phaser.Easing.Bounce.InOut, true).loop(true);
    }

    GearTrigger.prototype.update = function() {
      GearTrigger.__super__.update.call(this);
      if (this.alpha !== 0) {
        return this.alpha = 0.3;
      }
    };

    return GearTrigger;

  })(gm.Scenery.Item);

  gm.Scenery.Scaffolding = (function(_super) {

    __extends(Scaffolding, _super);

    function Scaffolding(game, x, y, id, extra) {
      Scaffolding.__super__.constructor.call(this, game, x, y, id, gm.Mode.IM, extra);
      this.x += gm.TILE_SIZE;
    }

    return Scaffolding;

  })(gm.Scenery.Item);

  gm.Scenery.Warrior = (function(_super) {

    __extends(Warrior, _super);

    function Warrior(game, x, y, id, extra) {
      Warrior.__super__.constructor.call(this, game, x, y, id, extra.mode, extra);
      this.x += gm.TILE_SIZE;
      this.y += gm.TILE_SIZE / 2;
    }

    return Warrior;

  })(gm.Scenery.Item);

  gm.Scenery.Kiwi = (function(_super) {

    __extends(Kiwi, _super);

    function Kiwi(game, x, y, id, extra) {
      Kiwi.__super__.constructor.call(this, game, x, y, id, extra.mode, extra);
      this.x += gm.TILE_SIZE;
    }

    return Kiwi;

  })(gm.Scenery.Item);

  gm.Scenery.Arch = (function(_super) {

    __extends(Arch, _super);

    function Arch(game, x, y, id, extra) {
      Arch.__super__.constructor.call(this, game, x, y, id, extra.mode, extra);
      this.x += gm.TILE_SIZE;
    }

    return Arch;

  })(gm.Scenery.Item);

  gm.Scenery.Gear = (function(_super) {

    __extends(Gear, _super);

    function Gear(game, x, y, id, extra) {
      var angle;
      Gear.__super__.constructor.call(this, game, x, y, id, extra.mode, extra);
      this.anchor.setTo(0.5, 0.5);
      angle = 360;
      if (this.extra.reverse) {
        angle *= -1;
      }
      this.tween = this.game.add.tween(this).to({
        angle: angle
      }, 3000, Phaser.Easing.Linear.None, true).loop(true);
    }

    return Gear;

  })(gm.Scenery.Item);

  gm.Scenery.Gear2 = (function(_super) {

    __extends(Gear2, _super);

    function Gear2(game, x, y, id, extra) {
      Gear2.__super__.constructor.call(this, game, x, y, id + '2', extra);
    }

    return Gear2;

  })(gm.Scenery.Gear);

  gm.Scenery.BadassDoor = (function(_super) {

    __extends(BadassDoor, _super);

    function BadassDoor(game, x, y, id, extra) {
      BadassDoor.__super__.constructor.call(this, game, x, y, id, extra.mode, extra);
      this.animations.add('closed', [1]);
      this.animations.add('open', [0]);
      this.animations.play('closed', 10, true);
      this.y -= gm.TILE_SIZE / 2;
      this.x += gm.TILE_SIZE * 2.5;
    }

    return BadassDoor;

  })(gm.Scenery.Item);

  gm.Scenery.Furnace = (function(_super) {

    __extends(Furnace, _super);

    function Furnace(game, x, y, id, extra) {
      Furnace.__super__.constructor.call(this, game, x, y, id, extra.mode, extra);
      this.animations.add('on', [1]);
      this.animations.add('off', [0]);
      this.animations.play((extra.on ? 'on' : 'off'), 10, true);
      this.anchor.setTo(.5, .5);
      this.x += this.width - gm.TILE_SIZE * 1.5;
      this.y += this.height - gm.TILE_SIZE / 2;
    }

    Furnace.prototype.turnon = function() {
      return this.animations.play('on', 10, true);
    };

    Furnace.prototype.turnoff = function() {
      return this.animations.play('off', 10, true);
    };

    return Furnace;

  })(gm.Scenery.Item);

  gm.Scenery.Pipe = (function(_super) {

    __extends(Pipe, _super);

    function Pipe(game, x, y, id, extra) {
      Pipe.__super__.constructor.call(this, game, x, y, id + (extra.small ? '_small' : ''), extra.mode, extra);
      this.animations.add('down', [3]);
      this.animations.add('up', [2]);
      this.animations.add('left', [0]);
      this.animations.add('right', [1]);
      this.animations.play(extra.side.toLowerCase(), 10, true);
      this.x += gm.TILE_SIZE / 2;
      this.y += gm.TILE_SIZE / 2;
    }

    return Pipe;

  })(gm.Scenery.Item);

  gm.Scenery.PipeBend = (function(_super) {

    __extends(PipeBend, _super);

    function PipeBend(game, x, y, id, extra) {
      PipeBend.__super__.constructor.call(this, game, x, y, id + (extra.small ? '_small' : '') + (extra.out ? '_out' : '_in'), extra.mode, extra);
      this.animations.add('nw', [3]);
      this.animations.add('ne', [2]);
      this.animations.add('se', [0]);
      this.animations.add('sw', [1]);
      this.animations.play(extra.side, 10, true);
      this.y += gm.TILE_SIZE * 1.5;
      this.x += gm.TILE_SIZE * 1.5;
    }

    return PipeBend;

  })(gm.Scenery.Item);

  gm.Scenery.PipeSide = (function(_super) {

    __extends(PipeSide, _super);

    function PipeSide(game, x, y, id, extra) {
      PipeSide.__super__.constructor.call(this, game, x, y, id, extra.mode, extra);
      this.animations.add('up', [0]);
      this.animations.add('down', [2]);
      this.animations.add('left', [3]);
      this.animations.add('right', [1]);
      this.animations.play(extra.side, 10, true);
      this.anchor.setTo(.5, .5);
      this.y += gm.TILE_SIZE * 3.5;
      this.x += gm.TILE_SIZE * 3.5;
      if (extra.flip === 'x') {
        this.scale.x *= -1;
      }
      if (extra.flip === 'y') {
        this.scale.y *= -1;
      }
    }

    return PipeSide;

  })(gm.Scenery.Item);

  gm.Scenery.make = function(game, x, y, id, extra) {
    var res;
    res = null;
    switch (id) {
      case 'torch':
        res = new gm.Scenery.Lamp(game, x, y, 'torch', extra);
        break;
      case 'geartrigger':
        res = new gm.Scenery.GearTrigger(game, x, y, 'gear', extra);
        break;
      case 'gear':
        res = new gm.Scenery.Gear(game, x, y, 'gear', extra);
        break;
      case 'gear2':
        res = new gm.Scenery.Gear2(game, x, y, 'gear', extra);
        break;
      case 'badassdoor':
        res = new gm.Scenery.BadassDoor(game, x, y, 'badassdoor', extra);
        break;
      case 'arch':
        res = new gm.Scenery.Arch(game, x, y, 'arch', extra);
        break;
      case 'furnace':
        res = new gm.Scenery.Furnace(game, x, y, 'furnace', extra);
        break;
      case 'kiwi':
        res = new gm.Scenery.Kiwi(game, x, y, 'kiwi', extra);
        break;
      case 'warrior':
        res = new gm.Scenery.Warrior(game, x, y, 'warrior', extra);
        break;
      case 'pipe':
        res = new gm.Scenery.Pipe(game, x, y, 'pipe', extra);
        break;
      case 'scaffolding':
        res = new gm.Scenery.Scaffolding(game, x, y, 'scaffolding', extra);
        break;
      case 'pipeside':
        res = new gm.Scenery.PipeSide(game, x, y, 'pipeside', extra);
        break;
      case 'pipebend':
        res = new gm.Scenery.PipeBend(game, x, y, 'pipebend', extra);
        break;
      default:
        throw 'jconnais pas ' + id + ' batar';
    }
    return res;
  };

}).call(this);
