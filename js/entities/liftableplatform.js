// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gm.LiftablePlatform = (function(_super) {

    __extends(LiftablePlatform, _super);

    function LiftablePlatform(game, xx, yy, ww, hh, keyRe, keyIm, triggers, data) {
      var _ref, _ref1, _ref2;
      this.game = game;
      LiftablePlatform.__super__.constructor.call(this, game, xx, yy, ww, hh, keyRe, keyIm, triggers, data);
      this.amplitude = parseInt((_ref = data.amplitude) != null ? _ref : 0);
      this.direction = parseInt((_ref1 = data.direction) != null ? _ref1 : gm.Direction.UP);
      this.duration = parseInt((_ref2 = data.duration) != null ? _ref2 : 1000);
      this.used = false;
      this.busy = false;
      this.originalX = this.body.x;
      this.originalY = this.body.y;
      this.lastLiftTime = 0;
      this.resetTime = null;
      if (data.resettime) {
        this.resetTime = parseInt(data.resettime);
      }
    }

    LiftablePlatform.prototype.lift = function(reverse) {
      var tween, xDiff, yDiff;
      if (reverse == null) {
        reverse = false;
      }
      this.busy = true;
      if (!reverse) {
        xDiff = this.body.x + (this.direction === gm.Direction.LEFT ? -this.amplitude : this.direction === gm.Direction.RIGHT ? this.amplitude : 0);
        yDiff = this.body.y + (this.direction === gm.Direction.DOWN ? this.amplitude : this.direction === gm.Direction.UP ? -this.amplitude : 0);
        this.used = true;
      } else {
        xDiff = this.originalX;
        yDiff = this.originalY;
        this.used = false;
      }
      tween = this.game.add.tween(this.body).to({
        x: xDiff,
        y: yDiff
      }, this.duration, Phaser.Easing.Linear.None, true);
      tween.onComplete.add(function() {
        this.lastLiftTime = Date.now();
        return this.busy = false;
      }, this);
      return tween.start();
    };

    LiftablePlatform.prototype.reset = function() {
      console.log('triggers reset');
      this.lift(true);
      return this.resetTriggers();
    };

    LiftablePlatform.prototype.update = function() {
      if (this.allTriggersFired() && !this.used && !this.busy) {
        return this.lift();
      } else if (!this.busy && this.used && this.resetTime && this.lastLiftTime !== 0 && Date.now() - this.lastLiftTime > this.resetTime) {
        return this.reset();
      }
    };

    return LiftablePlatform;

  })(gm.DynamicPlatform);

}).call(this);
