// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gm.Platform = (function(_super) {

    __extends(Platform, _super);

    function Platform(game, xx, yy, ww, hh, keyRe, keyIm, props) {
      var mode, _ref;
      this.game = game;
      if (props == null) {
        props = {};
      }
      mode = (_ref = parseInt(props.mode)) != null ? _ref : null;
      this.hidden = false;
      Platform.__super__.constructor.call(this, game, xx * gm.TILE_SIZE, yy * gm.TILE_SIZE, ww * gm.TILE_SIZE, hh * gm.TILE_SIZE, (mode && mode === gm.Mode.IM ? keyIm : keyRe));
      this.game.physics.enable(this, Phaser.Physics.ARCADE);
      this.mode = mode;
      this.height = gm.TILE_SIZE * hh;
      this.width = gm.TILE_SIZE * ww;
      this.body.immovable = true;
      this.body.allowGravity = false;
      this.game.add.existing(this);
      this.enabled = true;
    }

    Platform.prototype.update = function() {};

    Platform.prototype.enable = function() {
      this.enabled = true;
      this.alpha = 1;
      return this.body.checkCollision.none = false;
    };

    Platform.prototype.disable = function() {
      this.enabled = false;
      this.alpha = 0;
      return this.body.checkCollision.none = true;
    };

    return Platform;

  })(Phaser.TileSprite);

}).call(this);
