// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  gm.Load = (function(_super) {

    __extends(Load, _super);

    function Load(game) {
      this.game = game;
      this.nbLevels = Object.keys(gm.data.levels).length;
      this.nbItems = Object.keys(gm.data.items).length;
    }

    Load.prototype.preload = function() {
      var i, _i, _j, _ref, _ref1, _results;
      this.game.load.image('platform', 'assets/platform.png');
      this.game.load.image('ropeline', 'assets/ropeline.png');
      this.game.load.image('chain', 'assets/chain.png');
      this.game.load.image('scaffolding', 'assets/scaffolding.png');
      this.game.load.image('spike', 'assets/spike.png');
      this.game.load.image('kiwi', 'assets/kiwi.png');
      this.game.load.image('warrior', 'assets/warrior.png');
      this.game.load.image('title', 'assets/title.png');
      this.game.load.spritesheet('torch', 'assets/torch.png', 30, 90, 2);
      this.game.load.spritesheet('badassdoor', 'assets/badassdoor.png', 120, 180, 2);
      this.game.load.spritesheet('furnace', 'assets/furnace.png', 180, 180, 2);
      this.game.load.spritesheet('pipe_small', 'assets/pipe_small.png', 30, 120, 4);
      this.game.load.spritesheet('pipebend_small', 'assets/pipebend_small.png', 60, 60, 4);
      this.game.load.spritesheet('pipe', 'assets/pipe.png', 60, 60, 4);
      this.game.load.spritesheet('pipebend_out', 'assets/pipebend_out.png', 120, 120, 4);
      this.game.load.spritesheet('pipebend_in', 'assets/pipebend_in.png', 120, 120, 4);
      this.game.load.spritesheet('pipeside', 'assets/pipeside.png', 120, 120, 4);
      this.game.load.image('gear', 'assets/gear.png');
      this.game.load.image('gear2', 'assets/gear2.png');
      this.game.load.image('arch', 'assets/arch.png');
      this.game.load.image('geartrigger', 'assets/geartrigger.png');
      this.game.load.image('wall_1', 'assets/wall_1.png');
      this.game.load.image('wall_2', 'assets/wall_2.png');
      this.game.load.image('counterweight', 'assets/counterweight.png');
      this.game.load.image('crack_1', 'assets/crack_1.png');
      this.game.load.image('crack_2', 'assets/crack_2.png');
      this.game.load.image('lightbeam', 'assets/lightbeam.png');
      this.game.load.image('platform_1', 'assets/platform_1.png');
      this.game.load.image('platform_2', 'assets/platform_2.png');
      this.game.load.image('hint', 'assets/hint.png');
      this.game.load.image('steam', 'assets/steam.png');
      this.game.load.image('overlay', 'assets/overlay.png');
      this.game.load.image('overlay_red', 'assets/overlay_red.png');
      this.game.load.script('webfont', '//ajax.googleapis.com/ajax/libs/webfont/1.4.7/webfont.js');
      for (i = _i = 1, _ref = this.nbItems; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        this.game.load.image('item_' + i, 'assets/item_' + i + '.png');
      }
      this.game.load.spritesheet('player', 'assets/player_prod.png', 60, 90, 12, 3, 3);
      _results = [];
      for (i = _j = 1, _ref1 = this.nbLevels; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 1 <= _ref1 ? ++_j : --_j) {
        _results.push(this.game.load.json('level_' + i, 'maps/' + i + '.json'));
      }
      return _results;
    };

    Load.prototype.parseLevelData = function() {
      var i, json, key, res, _i, _ref, _results;
      _results = [];
      for (i = _i = 1, _ref = this.nbLevels; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
        json = this.game.cache.getJSON('level_' + i);
        res = gm.Load.parseTiledJSON(json);
        _results.push((function() {
          var _j, _len, _ref1, _results1;
          _ref1 = Object.keys(res);
          _results1 = [];
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            key = _ref1[_j];
            _results1.push(gm.data.levels[i][key] = res[key]);
          }
          return _results1;
        })());
      }
      return _results;
    };

    Load.prototype.create = function() {
      var WebFontConfig;
      this.parseLevelData();
      WebFontConfig = {
        google: {
          families: ['MedievalSharp']
        }
      };
      return this.game.state.start('title');
    };

    return Load;

  })(Phaser.State);

  gm.Load.parseTiledJSON = function(data) {
    var SIZE, all, d, i, l, o, res, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    SIZE = 20;
    res = {
      height: data.layers[0].height,
      width: data.layers[0].width,
      platforms: [],
      cracks: [],
      triggers: [],
      scenery: [],
      items: [],
      lights: [],
      player: null,
      exit: null
    };
    if (data.layers[0].name !== 'platforms') {
      throw "layer 0 must be platforms layer named 'platforms'";
    }
    if (data.layers[1].name !== 'triggers') {
      throw "layer 1 must be triggers layer named 'triggers'";
    }
    if (data.layers[2].name !== 'items') {
      throw "layer 2 must be items layer named 'items'";
    }
    if (data.layers[3].name !== 'scenery') {
      throw "layer 3 must be scenery layer named 'scenery'";
    }
    if (data.layers[4].name !== 'lights') {
      throw "layer 4 must be lights layer named 'lights'";
    }
    if (data.layers[5].name !== 'cracks') {
      throw "layer 5 must be cracks layer named 'cracks'";
    }
    all = [];
    _ref = data.layers;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      l = _ref[i];
      all = all.concat(data.layers[i].objects);
    }
    for (i = _j = 0, _len1 = all.length; _j < _len1; i = ++_j) {
      o = all[i];
      if (o.type === "") {
        o.type = 'platform';
      }
      if ((_ref1 = o.type) === 'platform' || _ref1 === 'liftableplatform' || _ref1 === 'counterweight' || _ref1 === 'spike' || _ref1 === 'zerog') {
        res.platforms.push({
          type: o.type,
          x: o.x / SIZE,
          y: o.y / SIZE,
          w: o.width / SIZE,
          h: o.height / SIZE,
          properties: o.properties
        });
      } else if (o.type === "player") {
        res.player = [o.x / SIZE, o.y / SIZE];
      } else if (o.type === "exit") {
        res.exit = [o.x / SIZE, o.y / SIZE];
      } else if ((_ref2 = o.type) === 'positiontrigger' || _ref2 === 'texttrigger' || _ref2 === 'itemtrigger') {
        d = {
          type: o.type,
          id: o.properties.id,
          x: o.x / SIZE,
          y: o.y / SIZE,
          automatic: o.properties.automatic,
          mode: o.properties.mode,
          properties: o.properties
        };
        if (o.type === "positiontrigger") {
          res.triggers.push(d);
        } else if (o.type === 'texttrigger') {
          d.text = o.properties.text;
          res.triggers.push(d);
        } else if (o.type === 'itemtrigger') {
          d.item_id = parseInt(o.properties.item_id);
          res.triggers.push(d);
        } else {
          throw "unknown (type=" + o.type + ") on trigger layer";
        }
      } else if ((_ref3 = o.type) === 'item') {
        if (o.type === "item") {
          res.items.push({
            id: o.properties.id,
            x: o.x / SIZE,
            y: o.y / SIZE,
            mode: o.properties.mode
          });
        } else {
          throw "unknown (type=" + o.type + ") on items layer";
        }
      } else if ((_ref4 = o.type) === 'sceneryitem') {
        if (o.type === "sceneryitem") {
          res.scenery.push({
            x: o.x / SIZE,
            y: o.y / SIZE,
            id: o.properties.id,
            properties: o.properties
          });
        } else {
          throw "unknown (type=" + o.type + ") on scenery layer";
        }
      } else if ((_ref5 = o.type) === 'light') {
        if (o.type === "light") {
          res.lights.push({
            x: o.x / SIZE,
            y: o.y / SIZE
          });
        } else {
          throw "unknown (type=" + o.type + ") on light layer";
        }
      } else if ((_ref6 = o.type) === 'crack') {
        if (o.type === "crack") {
          res.cracks.push({
            x: o.x / SIZE,
            y: o.y / SIZE
          });
        } else {
          throw "unknown (type=" + o.type + ") on cracks layer";
        }
      }
    }
    return res;
  };

}).call(this);
